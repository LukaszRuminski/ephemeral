{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Log, UserManager, WebStorageStateStore } from 'oidc-client';\nimport { oidcSettings } from './oidcSettings';\n\nclass AuthService {\n  constructor(settings) {\n    this.getUser = async () => {\n      const user = await this.manager.getUser();\n\n      if (!user) {\n        return this.manager.signinRedirectCallback();\n      }\n\n      await this.manager.storeUser(user);\n      return user;\n    };\n\n    this.isAuthenticated = () => {\n      const oidcStorage = JSON.parse(sessionStorage.getItem(`oidc.user:${oidcSettings.authority}:${oidcSettings.client_id}`));\n      const valid = !!oidcStorage && this.callEndpoint(\"/profiles/oidc/userinfo\");\n      return !!valid && !!oidcStorage.access_token;\n    };\n\n    this.callEndpoint = endpoint => {\n      const oidcStorage = JSON.parse(sessionStorage.getItem(`oidc.user:${oidcSettings.authority}:${oidcSettings.client_id}`));\n      const url = process.env.PROVIDER + endpoint;\n      return fetch(url, {\n        headers: {\n          'Authorization': \"Bearer \" + oidcStorage.access_token\n        }\n      }).then(res => !!res);\n    };\n\n    this.createAuthenticationRequest = () => {\n      return this.manager.createSigninRequest();\n    };\n\n    this.startAuthentication = () => {\n      sessionStorage.setItem('redirectUri', window.location.pathname);\n      return this.manager.signinRedirect();\n    };\n\n    this.completeAuthentication = () => {\n      this.manager.signinRedirectCallback().then(() => {\n        return this.getUser();\n      }).catch(error => {\n        this.navigateToScreen();\n        this.handleError(error);\n      });\n    };\n\n    this.createLogoutRequest = () => {\n      return this.manager.createSignoutRequest();\n    };\n\n    this.startLogout = () => {\n      const post_logout_redirect_uri = encodeURIComponent(oidcSettings.post_logout_redirect_uri.toString());\n      this.manager.clearStaleState().then(() => {\n        sessionStorage.clear();\n        window.open(process.env.PROVIDER + '/auth-ui/logout?client_id=' + process.env.CLIENT_ID + '&redirect_uri=' + post_logout_redirect_uri, \"_self\");\n      }).catch(error => this.handleError(error));\n    };\n\n    this.navigateToScreen = () => {\n      window.location.replace(sessionStorage.getItem('redirectUri'));\n    };\n\n    this.settings = settings;\n    this.manager = new UserManager(_objectSpread(_objectSpread({}, this.settings), {}, {\n      managerStore: new WebStorageStateStore({\n        store: sessionStorage\n      })\n    }));\n    this.manager.events.addUserLoaded(() => {// if (router.pathname.indexOf(\"code\") !== -1) {\n      //     this.navigateToScreen();\n      // }\n    });\n    this.manager.events.addAccessTokenExpired(() => {\n      console.log(\"token expired\");\n      this.startLogout();\n    });\n    Log.logger = console;\n    Log.level = Log.ERROR;\n  }\n\n  handleError(error) {\n    console.error(\"Problem with authentication endpoint: \", error);\n  }\n\n}\n\nexport default AuthService;","map":null,"metadata":{},"sourceType":"module"}