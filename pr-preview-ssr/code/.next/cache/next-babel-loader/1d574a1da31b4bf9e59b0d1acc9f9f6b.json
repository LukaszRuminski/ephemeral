{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport App from 'next/app';\nimport Head from 'next/head';\nimport React from 'react';\nimport { getGlobalLabels } from '../adapters/contentful/contentful.adapters';\nimport { AuthProvider } from '../auth/authContext';\nexport default class MyApp extends App {\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    let pageProps = {};\n    const labels = await getGlobalLabels();\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n    }\n\n    return {\n      pageProps,\n      labels: labels.data.labelGroupCollection.items[0].labels\n    };\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      this.setState({\n        isOidcReady: true\n      });\n    };\n\n    this.state = {\n      isOidcReady: false\n    };\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps,\n      labels\n    } = this.props;\n    const {\n      isOidcReady\n    } = this.state;\n    return isOidcReady && __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, labels.title)), __jsx(AuthProvider, null, __jsx(Component, _extends({}, pageProps, {\n      globalLabels: labels\n    }))));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}